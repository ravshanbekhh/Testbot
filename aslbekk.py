import asyncio
import json
import logging
import os

from collections import defaultdict, Counter
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import (
    Message, CallbackQuery,
    ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton,
    BotCommand
)
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage

TOKEN = "8012401893:AAFAFY0V3YVEeqf3gX6QJKBo6tixje2s1A0"
ADMIN_ID = 5825453938

bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()

default_lang = "uz"
user_languages = defaultdict(lambda: default_lang)
SAVOLLAR_FILE = "savollar.json"
USERS_FILE = "users.json"

class TestState(StatesGroup):
    question_index = State()
    questions = State()

def save_user(user):
    if not os.path.exists(USERS_FILE):
        data = {}
    else:
        with open(USERS_FILE, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except Exception:
                data = {}

    user_id = str(user.id)
    username = user.username or ""
    first_name = user.first_name or ""
    last_name = user.last_name or ""
    data[user_id] = {
        "username": username,
        "first_name": first_name,
        "last_name": last_name
    }

    with open(USERS_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

async def set_bot_commands(bot: Bot):
    commands = [
        BotCommand(command="start", description="Menyuni ochish"),
        BotCommand(command="help", description="Bot haqida ma'lumot"),
    ]
    await bot.set_my_commands(commands)

def get_language_changed_message(lang):
    return {
        "uz": "Til o‚Äòzgartirildi ‚úÖ",
        "en": "Language has been changed ‚úÖ",
        "ru": "–Ø–∑—ã–∫ –±—ã–ª –∏–∑–º–µ–Ω–µ–Ω ‚úÖ"
    }.get(lang, "Til o‚Äòzgartirildi ‚úÖ")

def get_main_menu(user_id):
    lang = user_languages[user_id]
    is_admin = (user_id == ADMIN_ID)
    if lang == "ru":
        keyboard = [
            [KeyboardButton(text="–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç"), KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")],
            [KeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º")]
        ]
        if is_admin:
            keyboard.insert(1, [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç (–¥–ª—è –∞–¥–º–∏–Ω–∞)")])
            keyboard.append([KeyboardButton(text="–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")])
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    elif lang == "en":
        keyboard = [
            [KeyboardButton(text="Take a test"), KeyboardButton(text="Settings")],
            [KeyboardButton(text="Contact admin")]
        ]
        if is_admin:
            keyboard.insert(1, [KeyboardButton(text="Add test (for admin)")])
            keyboard.append([KeyboardButton(text="User list")])
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)
    else:  # default uz
        keyboard = [
            [KeyboardButton(text="Test yechish"), KeyboardButton(text="Sozlamalar")],
            [KeyboardButton(text="Admin bilan bog ªlanish")]
        ]
        if is_admin:
            keyboard.insert(1, [KeyboardButton(text="Test qo‚Äòshish (admin uchun)")])
            keyboard.append([KeyboardButton(text="Foydalanuvchi ro'yxati")])
        return ReplyKeyboardMarkup(keyboard=keyboard, resize_keyboard=True)

@router.message(F.text.in_([
    "Foydalanuvchi ro'yxati",
    "User list",
    "–°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
]))
async def show_users_menu(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("Siz admin emassiz!")
        return
    if not os.path.exists(USERS_FILE):
        await message.answer("Hali foydalanuvchilar yo‚Äòq.")
        return
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    text = "üë• Foydalanuvchilar ro‚Äòyxati:\n\n"
    for user_id, info in data.items():
        username = info.get("username", "")
        name = (info.get("first_name", "") + " " + info.get("last_name", "")).strip()
        text += f"{user_id} | @{username if username else '-'} | {name}\n"
    text += f"\nJami foydalanuvchilar: {len(data)}"
    await message.answer(text)

def get_category_menu(user_id):
    lang = user_languages[user_id]
    if lang == "ru":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üñê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞"), KeyboardButton(text="üñê –ê–Ω–≥–ª–∏–π—Å–∫–∏–π")],
                [KeyboardButton(text="üñê –ì–µ–æ–≥—Ä–∞—Ñ–∏—è"), KeyboardButton(text="üñê –ò—Å—Ç–æ—Ä–∏—è")],
                [KeyboardButton(text="üñê –•–∏–º–∏—è"), KeyboardButton(text="üñê –ë–∏–æ–ª–æ–≥–∏—è")],
                [KeyboardButton(text="üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç"), KeyboardButton(text="üñê IELTS Reading")],
                [KeyboardButton(text="üñê –ù–∞–∑–∞–¥")]
            ],
            resize_keyboard=True
        )
    elif lang == "en":
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üñê Math"), KeyboardButton(text="üñê English")],
                [KeyboardButton(text="üñê Geography"), KeyboardButton(text="üñê History")],
                [KeyboardButton(text="üñê Chemistry"), KeyboardButton(text="üñê Biology")],
                [KeyboardButton(text="üß† Psychological test"), KeyboardButton(text="üñê IELTS Reading")],
                [KeyboardButton(text="üñê Back")]
            ],
            resize_keyboard=True
        )
    else:
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üñê Matematika"), KeyboardButton(text="üñê Ingliz tili")],
                [KeyboardButton(text="üñê Geografiya"), KeyboardButton(text="üñê Tarix")],
                [KeyboardButton(text="üñê Kimyo"), KeyboardButton(text="üñê Biologiya")],
                [KeyboardButton(text="üß† Psixologik test"), KeyboardButton(text="üñê IELTS Reading")],
                [KeyboardButton(text="üñê Ortga")]
            ],
            resize_keyboard=True
        )

language_keyboard = InlineKeyboardMarkup(inline_keyboard=[
    [InlineKeyboardButton(text="üá∫üáø O‚Äòzbekcha", callback_data="lang_uz")],
    [InlineKeyboardButton(text="üá∑üá∫ –†—É—Å—Å–∫–∏–π", callback_data="lang_ru")],
    [InlineKeyboardButton(text="üá¨üáß English", callback_data="lang_en")]
])

def get_text(user_id, uz="", ru="", en=""):
    lang = user_languages[user_id]
    return {"ru": ru, "en": en}.get(lang, uz)

subject_mapping = {
    "üñê Matematika": "matematika",
    "üñê –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞": "matematika",
    "üñê Math": "matematika",
    "üñê Ingliz tili": "ingliz_tili",
    "üñê –ê–Ω–≥–ª–∏–π—Å–∫–∏–π": "ingliz_tili",
    "üñê English": "ingliz_tili",
    "üñê Geografiya": "geografiya",
    "üñê –ì–µ–æ–≥—Ä–∞—Ñ–∏—è": "geografiya",
    "üñê Geography": "geografiya",
    "üñê Tarix": "tarix",
    "üñê –ò—Å—Ç–æ—Ä–∏—è": "tarix",
    "üñê History": "tarix",
    "üñê Kimyo": "kimyo",
    "üñê –•–∏–º–∏—è": "kimyo",
    "üñê Chemistry": "kimyo",
    "üñê Biologiya": "biologiya",
    "üñê –ë–∏–æ–ª–æ–≥–∏—è": "biologiya",
    "üñê Biology": "biologiya",
    "üñê IELTS Reading": "ielts_reading",
    "üß† Psixologik test": "psixologik_test",
    "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç": "psixologik_test",
    "üß† Psychological test": "psixologik_test",
    "üñê Ortga": "back",
    "üñê –ù–∞–∑–∞–¥": "back",
    "üñê Back": "back"
}

async def load_and_start_test(subject, message: Message, state: FSMContext):
    save_user(message.from_user)
    if not os.path.exists(SAVOLLAR_FILE):
        await message.answer(get_text(
            message.from_user.id,
            uz="Bu fandan savollar yo‚Äòq.",
            ru="–ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
            en="No questions for this subject."
        ))
        return

    lang = user_languages[message.from_user.id]
    with open(SAVOLLAR_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)

    if subject in ["ingliz_tili", "ielts_reading"]:
        questions = data.get(subject, [])
    elif subject == "psixologik_test":
        questions = data.get(subject, {}).get(lang, [])
    else:
        questions = data.get(subject, {}).get(lang, [])

    if not questions:
        await message.answer(get_text(
            message.from_user.id,
            uz="Bu fandan savollar yo‚Äòq.",
            ru="–ü–æ —ç—Ç–æ–º—É –ø—Ä–µ–¥–º–µ—Ç—É –Ω–µ—Ç –≤–æ–ø—Ä–æ—Å–æ–≤.",
            en="No questions for this subject."
        ))
        return

    if subject == "psixologik_test":
        await state.set_state(TestState.question_index)
        await state.update_data(questions=questions, index=0, answers=[], subject=subject)
    else:
        await state.set_state(TestState.question_index)
        await state.update_data(questions=questions, index=0, subject=subject, correct_count=0, wrong_count=0)
    await send_question(message, 0, state)

async def send_question(message: Message, index: int, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    if index >= len(questions):
        await message.answer(get_text(message.from_user.id, uz="‚úÖ Barcha testlar yakunlandi.", ru="‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω—ã.", en="‚úÖ All tests completed."))
        await state.clear()
        return

    question = questions[index]
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text=question["options"][0], callback_data=f"answer_A_{index}")],
        [InlineKeyboardButton(text=question["options"][1], callback_data=f"answer_B_{index}")],
        [InlineKeyboardButton(text=question["options"][2], callback_data=f"answer_C_{index}")]
    ])
    await message.answer(f"{index + 1}) {question['question']}", reply_markup=markup)

def get_psix_result(answers, user_id):
    lang = user_languages[user_id]
    count = Counter(answers)
    a, b, c = count.get("A", 0), count.get("B", 0), count.get("C", 0)
    if a >= b and a >= c:
        return {
            "uz": "Siz ochiqko‚Äòngil, faol va ijtimoiy odamsiz. Yangi tanishuv va sarguzashtlarni yaxshi ko‚Äòrasiz.",
            "ru": "–í—ã –æ—Ç–∫—Ä—ã—Ç—ã–π, –∞–∫—Ç–∏–≤–Ω—ã–π –∏ –æ–±—â–∏—Ç–µ–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –õ—é–±–∏—Ç–µ –Ω–æ–≤—ã–µ –∑–Ω–∞–∫–æ–º—Å—Ç–≤–∞ –∏ –ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è.",
            "en": "You are open, active, and sociable. You love new acquaintances and adventures."
        }[lang]
    elif b >= a and b >= c:
        return {
            "uz": "Siz tahlilchi, tinch va mustaqil odamsiz. O‚Äòzingizni rivojlantirishni va bilim orttirishni xush ko‚Äòrasiz.",
            "ru": "–í—ã –∞–Ω–∞–ª–∏—Ç–∏–∫, —Å–ø–æ–∫–æ–π–Ω—ã–π –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º—ã–π —á–µ–ª–æ–≤–µ–∫. –õ—é–±–∏—Ç–µ —Å–∞–º–æ—Ä–∞–∑–≤–∏—Ç–∏–µ –∏ –ø–æ–ª—É—á–∞—Ç—å –Ω–æ–≤—ã–µ –∑–Ω–∞–Ω–∏—è.",
            "en": "You are analytical, calm, and independent. You enjoy self-development and gaining new knowledge."
        }[lang]
    else:
        return {
            "uz": "Siz ijodiy va o‚Äòziga xos odamsiz. Odamlar bilan ishlash va jamoada bo‚Äòlish sizga yoqadi.",
            "ru": "–í—ã –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–π –∏ –Ω–µ–æ–±—ã—á–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –õ—é–±–∏—Ç–µ —Ä–∞–±–æ—Ç–∞—Ç—å —Å –ª—é–¥—å–º–∏ –∏ –±—ã—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ.",
            "en": "You are creative and unique. You like working with people and being part of a team."
        }[lang]

def get_test_result(correct, wrong, total, user_id):
    lang = user_languages[user_id]
    return {
        "uz": f"Test yakuni:\n\nSavollar soni: {total}\nTo‚Äòg‚Äòri javoblar: {correct}\nNoto‚Äòg‚Äòri javoblar: {wrong}\n\n{('Ajoyib natija!' if correct == total else 'Yaxshi harakat!')}",
        "ru": f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞:\n\n–í—Å–µ–≥–æ –≤–æ–ø—Ä–æ—Å–æ–≤: {total}\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct}\n–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {wrong}\n\n{('–û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç!' if correct == total else '–•–æ—Ä–æ—à–∞—è –ø–æ–ø—ã—Ç–∫–∞!')}",
        "en": f"Test result:\n\nTotal questions: {total}\nCorrect answers: {correct}\nWrong answers: {wrong}\n\n{('Excellent result!' if correct == total else 'Good try!')}"
    }[lang]

@router.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    save_user(callback.from_user)
    data = await state.get_data()
    if not data:
        await callback.answer("‚ùó Holat mavjud emas. /start dan boshlang.")
        return

    parts = callback.data.split("_")
    user_answer = parts[1]
    index = int(parts[2])
    questions = data.get("questions", [])
    subject = data.get("subject", "")
    answers = data.get("answers", [])
    correct_count = data.get("correct_count", 0)
    wrong_count = data.get("wrong_count", 0)

    if index >= len(questions):
        await callback.answer("‚ùó Savol topilmadi.")
        return

    if subject == "psixologik_test":
        answers.append(user_answer)
        await state.update_data(answers=answers)
        await callback.message.answer(get_text(
            callback.from_user.id,
            uz="‚úÖ Javobingiz qabul qilindi.",
            ru="‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –ø—Ä–∏–Ω—è—Ç.",
            en="‚úÖ Your answer has been accepted."
        ))
        if index + 1 >= len(questions):
            result = get_psix_result(answers, callback.from_user.id)
            await callback.message.answer(result)
            await state.clear()
            await callback.answer()
            return
    else:
        question = questions[index]
        correct_letter = question.get("answer", "")[0] if question.get("answer") else ""
        if user_answer == correct_letter:
            correct_count += 1
            await callback.message.answer(get_text(callback.from_user.id, uz="‚úÖ To‚Äòg‚Äòri javob!", ru="‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç!", en="‚úÖ Correct answer!"))
        else:
            wrong_count += 1
            await callback.message.answer(get_text(callback.from_user.id, uz=f"‚ùå Noto‚Äòg‚Äòri. To‚Äòg‚Äòri javob: {question['answer']}", ru=f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ. –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['answer']}", en=f"‚ùå Incorrect. Correct answer: {question['answer']}"))
        if index + 1 >= len(questions):
            total = correct_count + wrong_count
            result = get_test_result(correct_count, wrong_count, total, callback.from_user.id)
            await callback.message.answer(result)
            await state.clear()
            await callback.answer()
            return
        await state.update_data(correct_count=correct_count, wrong_count=wrong_count)

    await state.update_data(index=index + 1)
    await callback.answer()
    await send_question(callback.message, index + 1, state)

@router.message(F.text == "/start")
async def start_handler(message: Message):
    save_user(message.from_user)
    await message.answer(
        get_text(message.from_user.id, uz="Assalomu alaykum! Qanday yordam bera olaman?", ru="–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ß–µ–º –º–æ–≥—É –ø–æ–º–æ—á—å?", en="Hello! How can I help you?"),
        reply_markup=get_main_menu(message.from_user.id)
    )

@router.message(F.text == "/help")
async def help_handler(message: Message):
    lang = user_languages[message.from_user.id]
    if lang == "ru":
        text = (
            "–í —ç—Ç–æ–º –±–æ—Ç–µ –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —Ç–µ—Å—Ç—ã –ø–æ —Ä–∞–∑–Ω—ã–º –ø—Ä–µ–¥–º–µ—Ç–∞–º‚ùóÔ∏è.\n\n"
            "üü¢ –í—Å–µ–≥–¥–∞ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã: –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –¥–æ–±–∞–≤–ª—è—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã, —Ç–∞–∫ —á—Ç–æ –∫–∞–∂–¥—ã–π —Ä–∞–∑ –≤–∞—Å –∂–¥—É—Ç –Ω–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã!\n"
            "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: –í–∞—à–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –±–æ—Ç–µ ‚Äî —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–≤–æ–∏–º –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º.\n"
            "üåê –ú—É–ª—å—Ç–∏—è–∑—ã—á–Ω–æ—Å—Ç—å: –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –±–æ—Ç–∞ –Ω–∞ —É–∑–±–µ–∫—Å–∫–æ–º, —Ä—É—Å—Å–∫–æ–º –∏–ª–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º ‚Äî —è–∑—ã–∫ –º–æ–∂–Ω–æ —Å–º–µ–Ω–∏—Ç—å –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n"
            "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã: –ù–µ —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥–º–µ—Ç—ã ‚Äî –µ—Å—Ç—å –∏ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ç–µ—Å—Ç—ã!\n"
            "üë§ –°–≤—è–∑—å —Å –∞–¥–º–∏–Ω–æ–º: –ï—Å—Ç—å –æ—Ç–¥–µ–ª—å–Ω–∞—è –∫–Ω–æ–ø–∫–∞ –¥–ª—è —Å–≤—è–∑–∏ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è."
        )
    elif lang == "en":
        text = (
            "In this bot, you can solve quizzes on various subjects‚ùóÔ∏è.\n\n"
            "üü¢ Always new quizzes: The admin can add new quizzes, so there are always fresh questions waiting for you!\n"
            "üìä Statistics: Your results are saved ‚Äî track your progress and improve yourself.\n"
            "üåê Multilingual: Use the bot in Uzbek, Russian, or English ‚Äî change the language anytime.\n"
            "üß† Psychological tests: Not just academic subjects, but fun psychological quizzes too!\n"
            "üë§ Admin contact: Got a question or suggestion? Contact the admin directly via the special button."
        )
    else:
        text = (
            "Ushbu botda turli fanlardan testlar yechishingiz mumkin‚ùóÔ∏è.\n\n"
            "üü¢ Har doim yangi testlar: Botga yangi testlarni admin qo‚Äòsha oladi, shuning uchun har safar yangi savollar kutib turadi!\n"
            "üìä Statistika: Sizning natijalaringiz botda saqlanadi va o‚Äòzingizni doim rivojlantira olasiz.\n"
            "üåê Ko‚Äòp tillilik: Botdan o‚Äòzbek, rus yoki ingliz tilida foydalanishingiz mumkin ‚Äî tilni istalgan vaqtda almashtiring.\n"
            "üß† Psixologik testlar: Faqat fanlar emas, psixologik testlar ham mavjud!\n"
            "üë§ Admin bilan aloqa: Savol yoki takliflaringiz bo‚Äòlsa, admin bilan bevosita bog‚Äòlanish tugmasi orqali yozishingiz mumkin."
        )
    await message.answer(text)

@router.message(F.text.in_(["Test yechish", "–ü—Ä–æ–π—Ç–∏ —Ç–µ—Å—Ç", "Take a test"]))
async def test_category_menu(message: Message):
    save_user(message.from_user)
    await message.answer(
        get_text(message.from_user.id, uz="Fanni tanlang:", ru="–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç:", en="Choose a subject:"),
        reply_markup=get_category_menu(message.from_user.id)
    )

@router.message(F.text.in_(["üñê Ortga", "üñê –ù–∞–∑–∞–¥", "üñê Back"]))
async def back_to_main(message: Message):
    save_user(message.from_user)
    await message.answer(
        get_text(message.from_user.id, uz="Bosh menyuga qaytdingiz.", ru="–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", en="Returned to main menu."),
        reply_markup=get_main_menu(message.from_user.id)
    )

@router.message(lambda msg: msg.text in subject_mapping and subject_mapping[msg.text] != "back")
async def universal_subject_handler(message: Message, state: FSMContext):
    save_user(message.from_user)
    subject_key = subject_mapping[message.text]
    await load_and_start_test(subject_key, message, state)

@router.message(F.text.in_(["Test qo‚Äòshish (admin uchun)", "–î–æ–±–∞–≤–∏—Ç—å —Ç–µ—Å—Ç (–¥–ª—è –∞–¥–º–∏–Ω–∞)", "Add test (for admin)"]))
async def ask_admin_test(message: Message):
    if message.from_user.id != ADMIN_ID:
        await message.answer("Siz admin emassiz yoki sizda bu amalni bajarishga ruxsat yo‚Äòq!")
        return
    await message.answer(get_text(message.from_user.id,
        uz="Test savolini quyidagi formatda yuboring:\n\nSavol: 2 + 2 nechiga teng?\nA) 3\nB) 4\nC) 5\nTo‚Äòg‚Äòri javob: B",
        ru="–í—ã—à–ª–∏—Ç–µ –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ñ–æ—Ä–º–∞—Ç–µ:\n\n–í–æ–ø—Ä–æ—Å: 2 + 2 = ?\nA) 3\nB) 4\nC) 5\n–ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: B",
        en="Send the test question in the following format:\n\nQuestion: 2 + 2 = ?\nA) 3\nB) 4\nC) 5\nCorrect answer: B"
    ))

@router.message(F.text.startswith("Savol:"))
async def receive_test_question(message: Message):
    save_user(message.from_user)
    if message.from_user.id != ADMIN_ID:
        await message.answer("Siz admin emassiz yoki sizda bu amalni bajarishga ruxsat yo‚Äòq!")
        return

    subject = "matematika"
    lang = user_languages[message.from_user.id]
    file_name = SAVOLLAR_FILE

    if os.path.exists(file_name):
        with open(file_name, "r", encoding="utf-8") as f:
            try:
                data = json.load(f)
            except Exception:
                data = {}
    else:
        data = {}

    lines = message.text.strip().split("\n")
    if len(lines) < 5:
        await message.answer("Format noto‚Äòg‚Äòri. To‚Äòliq kiriting.")
        return

    savol = lines[0][7:].strip()
    A = lines[1][3:].strip()
    B = lines[2][3:].strip()
    C = lines[3][3:].strip()
    correct = lines[4].replace("To‚Äòg‚Äòri javob:", "").strip().upper()

    correct_option = {
        "A": f"A) {A}",
        "B": f"B) {B}",
        "C": f"C) {C}"
    }.get(correct)

    if not correct_option:
        await message.answer("‚ùå To‚Äòg‚Äòri javob noto‚Äòg‚Äòri formatda.")
        return

    new_question = {
        "question": savol,
        "options": [f"A) {A}", f"B) {B}", f"C) {C}"],
        "answer": correct_option
    }

    if subject in ["ingliz_tili", "ielts_reading"]:
        if subject not in data:
            data[subject] = []
        data[subject].append(new_question)
    else:
        if subject not in data:
            data[subject] = {}
        if lang not in data[subject]:
            data[subject][lang] = []
        data[subject][lang].append(new_question)

    with open(file_name, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=4)

    await message.answer("‚úÖ Test saqlandi.")

@router.message(F.text.in_(["Sozlamalar", "–ù–∞—Å—Ç—Ä–æ–π–∫–∏", "Settings"]))
async def settings_handler(message: Message):
    save_user(message.from_user)
    await message.answer(get_text(message.from_user.id, uz="Tilni tanlang:", ru="–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫:", en="Choose a language:"), reply_markup=language_keyboard)

@router.callback_query(F.data.startswith("lang_"))
async def language_selected(callback: CallbackQuery):
    save_user(callback.from_user)
    lang_code = callback.data.split("_")[-1]
    user_languages[callback.from_user.id] = lang_code
    await callback.message.answer(get_language_changed_message(lang_code), reply_markup=get_main_menu(callback.from_user.id))
    await callback.answer()

@router.message(F.text.in_(["Admin bilan bog ªlanish", "–°–≤—è–∑–∞—Ç—å—Å—è —Å –∞–¥–º–∏–Ω–æ–º", "Contact admin"]))
async def contact_admin(message: Message):
    save_user(message.from_user)
    link = f"tg://user?id={5825453938}"
    await message.answer(f"üì© Admin bilan bog ªlanish uchun shu yerni bosing: [Bog ªlanish]({link})", parse_mode="Markdown")

@router.message(F.text == "/users")
async def show_users(message: Message):
    if message.from_user.id != 5825453938:
        await message.answer("Siz admin emassiz!")
        return
    if not os.path.exists(USERS_FILE):
        await message.answer("Hali foydalanuvchilar yo‚Äòq.")
        return
    with open(USERS_FILE, "r", encoding="utf-8") as f:
        data = json.load(f)
    text = "üë• Foydalanuvchilar ro‚Äòyxati:\n\n"
    for user_id, info in data.items():
        username = info.get("username", "")
        name = (info.get("first_name", "") + " " + info.get("last_name", "")).strip()
        text += f"{user_id} | @{username if username else '-'} | {name}\n"
    text += f"\nJami foydalanuvchilar: {len(data)}"
    await message.answer(text)

async def main():
    logging.basicConfig(level=logging.INFO)
    await set_bot_commands(bot)
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
